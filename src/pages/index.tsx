/* eslint-disable react/no-children-prop */
import type { NextPage } from "next";
import Head from "next/head";
import { useState, useEffect, FC } from "react";
import { Appointment } from "../types";
import { Scheduler, ScheduleSpecificDate } from "@ssense/sscheduler";
import { useToast } from "@chakra-ui/react";
import {
  Box,
  Heading,
  VStack,
  Button,
  HStack,
  RangeSlider,
  RangeSliderTrack,
  RangeSliderFilledTrack,
  RangeSliderThumb,
  InputRightElement,
  Slider,
  SliderTrack,
  SliderFilledTrack,
  SliderThumb,
  NumberInput,
  NumberInputField,
  InputGroup,
  Input,
} from "@chakra-ui/react";
import { TimeIcon } from "@chakra-ui/icons";

const STARTING_HOUR = 7;

const scheduler = new Scheduler();

const getTimeFromMinuteDiff = ({
  // Time added to the starting point in minutes
  addedTime,
  startingPoint,
}: {
  addedTime: number;
  startingPoint: string;
}) => {
  const startingPointParsed = new Date(startingPoint);
  const startingPointUpdated = new Date(startingPointParsed.setHours(STARTING_HOUR));

  const selectedTimePoint = new Date(
    startingPointUpdated.setMinutes(new Date(startingPoint).getMinutes() + addedTime)
  ).toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" });

  return selectedTimePoint;
};

const AvailableTimeSlots: FC<{ url: string; date: string }> = ({ url, date }) => {
  const [existingAppointments, setExistingAppointments] = useState<ScheduleSpecificDate[] | null>(
    null
  );
  const [meetingDuration, setMeetingDuration] = useState(60); // minutes
  const [meetingInterval, setIntervalDuration] = useState(30); //minutes
  const [[timeFrom, timeTo], setTimeFromTo] = useState([60, 600]); //minutes

  const toast = useToast();

  useEffect(() => {
    fetch(url)
      .then(appointments => appointments.json())
      .then(({ appointments }) =>
        setExistingAppointments(
          appointments.map(({ startTime, endTime }: Appointment) => ({
            from: startTime,
            to: endTime,
          }))
        )
      )
      .catch(console.error);
  }, [url]);

  const parsedTimeFrom = getTimeFromMinuteDiff({ addedTime: timeFrom, startingPoint: date });
  const parsedTimeTo = getTimeFromMinuteDiff({ addedTime: timeTo, startingPoint: date });

  const getAvailableSlots = () => {
    if (!existingAppointments) return null;

    const parsedDate = new Date(date);
    const nextDay = new Date(parsedDate.setDate(parsedDate.getDate() + 1)).toISOString();

    return scheduler.getAvailability({
      from: date,
      to: nextDay,
      duration: meetingDuration,
      interval: meetingInterval,
      schedule: {
        weekdays: {
          from: parsedTimeFrom,
          to: parsedTimeTo,
        },
        unavailability: existingAppointments,
      },
    });
  };

  const availabilitySlots = getAvailableSlots();

  return (
    <div>
      <Head>
        <title>Become a time-master</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Box
        w="100%"
        minH="100vh"
        d="flex"
        p={6}
        overflow="auto"
        justifyContent="center"
        bgGradient={[
          "linear(to-tr, teal.300, yellow.400)",
          "linear(to-t, blue.200, teal.500)",
          "linear(to-b, orange.100, purple.300)",
        ]}
      >
        <Box width="25vw" padding={2} mt="15vh">
          <Heading as="h2" size="2xl" mb={8}>
            We&apos;re time-masters, let us save the day! And your time!
          </Heading>

          <HStack spacing={2} h="full">
            <VStack spacing={8} w="full" h="full" alignItems="flex-start">
              <VStack spacing={2} alignItems="flex-start">
                <Heading as="h3" size="md">
                  Appointment date
                </Heading>

                <Heading as="h4" size="sm">
                  <TimeIcon w={6} h={6} mr="2" />
                  {date}
                </Heading>
              </VStack>

              <VStack spacing={2}>
                <Heading as="h3" size="md">
                  Hours to choose from
                </Heading>

                <HStack spacing={2}>
                  <Input isReadOnly value={parsedTimeFrom} />

                  <Input isReadOnly value={parsedTimeTo} />
                </HStack>

                <RangeSlider
                  defaultValue={[60, 600]}
                  min={0}
                  max={780} // minutes from starting point (20:00)
                  step={30}
                  onChangeEnd={(v: [number, number]) => setTimeFromTo(v)}
                >
                  <RangeSliderTrack bg="red.100">
                    <RangeSliderFilledTrack bg="pink.500" />
                  </RangeSliderTrack>

                  <RangeSliderThumb boxSize={6} index={0} />

                  <RangeSliderThumb boxSize={6} index={1} />
                </RangeSlider>
              </VStack>

              <VStack spacing={2} w="full" alignItems="flex-start">
                <Heading as="h3" size="md">
                  New meeting duration
                </Heading>

                <InputGroup>
                  <InputRightElement
                    pointerEvents="none"
                    color="black.500"
                    fontSize="1em"
                    children="min"
                    top="16px"
                  />

                  <NumberInput
                    isReadOnly
                    fontSize="1.5em"
                    mt="4"
                    display="block"
                    defaultValue={60}
                    w={100}
                    value={meetingDuration}
                  >
                    <NumberInputField />
                  </NumberInput>
                </InputGroup>

                <Slider
                  aria-label="meeting-duration-slider"
                  colorScheme="pink"
                  defaultValue={60}
                  step={30}
                  min={30}
                  max={180}
                  onChangeEnd={setMeetingDuration}
                >
                  <SliderTrack bg="red.100">
                    <SliderFilledTrack />
                  </SliderTrack>

                  <SliderThumb />
                </Slider>
              </VStack>

              <VStack spacing={2} w="full" alignItems="flex-start">
                <Heading as="h3" size="md">
                  Meetings interval
                </Heading>

                <InputGroup>
                  <InputRightElement
                    pointerEvents="none"
                    color="black.500"
                    fontSize="1em"
                    children="min"
                    top="16px"
                  />

                  <NumberInput
                    isReadOnly
                    fontSize="1.5em"
                    mt="4"
                    display="block"
                    defaultValue={30}
                    w={100}
                    value={meetingInterval}
                  >
                    <NumberInputField />
                  </NumberInput>
                </InputGroup>

                <Slider
                  aria-label="meeting-duration-slider"
                  colorScheme="pink"
                  defaultValue={30}
                  step={15}
                  min={15}
                  max={180}
                  onChangeEnd={setIntervalDuration}
                >
                  <SliderTrack bg="red.100">
                    <SliderFilledTrack />
                  </SliderTrack>

                  <SliderThumb />
                </Slider>
              </VStack>
            </VStack>

            <VStack w="full" h="full" overflow="auto">
              {availabilitySlots &&
                availabilitySlots[date].map(slot => (
                  <Button
                    key={slot.time}
                    disabled={!slot.available}
                    h="auto"
                    onClick={() =>
                      toast({
                        title: "Appointment time selected!",
                        description: "Now sit and relax, we'll take care of the rest ðŸ’ƒ",
                        status: "success",
                        duration: 9000,
                        isClosable: true,
                      })
                    }
                  >
                    {slot.time}
                  </Button>
                ))}
            </VStack>
          </HStack>
        </Box>
      </Box>
    </div>
  );
};

const Home: NextPage = () => {
  return <AvailableTimeSlots url="/api/appointments" date="2021-03-03" />;
};

export default Home;
